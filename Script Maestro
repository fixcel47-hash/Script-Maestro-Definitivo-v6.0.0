#!/usr/bin/env bash
# =================================================================================
# INSTALADOR DOCKER SWARM MAJORADO (v4.0 - Sin API)
# Basado en la version installer.sh, eliminando toda dependencia de API/Token.
# Corrige el fallo de inicialización de Chatwoot.
# =================================================================================

SCRIPT_VERSION="4.0.0"

# Colores para mensajes
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[0;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Variables de entorno
DOCKER_DIR="/home/docker"
SCRIPT_PATH=$(readlink -f "$0")
SCRIPT_DIR=$(dirname "$SCRIPT_PATH")
TEMP_FILES=()

# Lista de archivos stack necesarios que DEBEN estar en la carpeta 'stacks/'
REQUIRED_STACKS=(
    "traefik-stack.yml" "portainer-stack.yml" "redis-stack.yml" 
    "postgres-stack.yml" "n8n-stack.yml" "evoapi-stack.yml" "chatwoot-stack.yml"
)

# Configuración de las herramientas a instalar
AVAILABLE_TOOLS=("traefik" "portainer" "redis" "postgres" "n8n" "evoapi" "chatwoot")
DEFAULT_SUBDOMAINS=("proxy" "admin" "redis" "postgres" "n8" "evoapi" "chat")
SELECTED_TOOLS=("traefik" "portainer" "redis" "postgres" "n8n" "evoapi" "chatwoot")
CUSTOM_SUBDOMAINS=()

# --- Funciones de Control y Error ---

# Función para mostrar mensajes
show_message() { echo -e "${BLUE}[INFO]${NC} $1"; }
show_error() { echo -e "${RED}[ERROR]${NC} $1"; }
show_success() { echo -e "${GREEN}[SUCCESS]${NC} $1"; }
show_warning() { echo -e "${YELLOW}[WARNING]${NC} $1"; }

# Función de limpieza (Autodestrucción y archivos temporales)
cleanup() {
    local exit_code=$1
    local delete_stacks=${2:-false}
    
    echo -e "${BLUE}[INFO]${NC} Realizando limpieza antes de salir..."
    
    if [ $exit_code -ne 0 ]; then
        echo -e "${RED}[ERROR]${NC} Error detectado durante la instalación. Limpiando archivos temporales..."
        # Eliminar archivos temporales en caso de error
        if [ ${#TEMP_FILES[@]} -gt 0 ]; then
            for file in "${TEMP_FILES[@]}"; do
                if [ -f "$file" ]; then rm -f "$file"; fi
            done
        fi
    fi
    
    # Si se solicita, eliminar archivos de despliegue y autodestruirse
    if [ $exit_code -ne 0 ] || [ "$delete_stacks" = true ]; then
        # Eliminar archivos de despliegue temporales
        for tool_name in "${SELECTED_TOOLS[@]}"; do
            local deploy_file="$DOCKER_DIR/$tool_name/$tool_name-deploy.yml"
            if [ -f "$deploy_file" ]; then rm -f "$deploy_file"; fi
        done
        
        # Script de autodestrucción en segundo plano
        local self_destruct_script="/tmp/self_destruct_$$_$(date +%s).sh"
        cat > "$self_destruct_script" << EOF
#!/bin/bash
sleep 1
rm -f "$SCRIPT_PATH"
rm -f "\$0"
EOF
        chmod +x "$self_destruct_script"
        nohup "$self_destruct_script" >/dev/null 2>&1 &
    fi
    
    echo -e "${BLUE}[INFO]${NC} Limpieza completada"
    
    if [ $exit_code -ne 0 ]; then
        echo -e "${RED}[ERROR]${NC} La instalación ha fallado. Revise los logs para más información."
    else
        echo -e "${GREEN}[SUCCESS]${NC} Instalación completada exitosamente"
    fi
}

# Configurar trampas para señales para limpiar antes de salir
trap 'cleanup 1 false; exit 1' SIGHUP SIGINT SIGQUIT SIGTERM
trap 'cleanup 1 false; exit 1' ERR

# Función para registrar un archivo temporal para limpieza posterior
register_temp_file() {
    local file_path=$1
    TEMP_FILES+=("$file_path")
}

# Función para animación de espera
spinner() {
    local pid=$1; local delay=0.1; local spinstr='|/-\'
    echo -n "Procesando "
    while [ "$(ps a | awk '{print $1}' | grep $pid)" ]; do
        local temp=${spinstr#?}; printf " [%c]  " "$spinstr"
        local spinstr=$temp${spinstr%"$temp"}; sleep $delay; printf "\b\b\b\b\b\b"
    done
    printf "    \b\b\b\b"; echo -e "${GREEN}[COMPLETADO]${NC}"
}

# Función para ejecutar comandos mostrando animación de espera
run_command() {
    local cmd=$1; local msg=$2
    show_message "$msg"
    eval "$cmd" > /dev/null 2>&1 &
    local cmd_pid=$!
    spinner $cmd_pid
    wait $cmd_pid
    local exit_status=$?
    
    if [ $exit_status -ne 0 ]; then
        show_error "Comando falló: $cmd"
        cleanup 1
        exit $exit_status
    fi
    return $exit_status
}

# Función para generar clave aleatoria de 32 caracteres
generate_random_key() {
    tr -dc 'A-Za-z0-9' </dev/urandom | head -c 32
}

# --- Funciones de Instalación de Dependencias y Seguridad ---

# Verificar e instalar dependencias
install_dependencies() {
    show_message "Verificando e instalando dependencias (Docker, curl, wget, git, jo)..."
    
    # Instalar jo para construcción de json (usado en la función de Chatwoot)
    run_command "apt-get update && apt-get install -y jo" "Actualizando repositorios e instalando 'jo'..."

    # Instalar Docker si no está presente
    if ! command -v docker &> /dev/null; then
        show_message "Instalando Docker..."
        run_command "apt-get install -y ca-certificates curl && \
                     install -m 0755 -d /etc/apt/keyrings && \
                     curl -fsSL https://download.docker.com/linux/ubuntu/gpg -o /etc/apt/keyrings/docker.asc && \
                     chmod a+r /etc/apt/keyrings/docker.asc && \
                     echo \"deb [arch=\$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/ubuntu \
                     \$(. /etc/os-release && echo \"\$VERSION_CODENAME\") stable\" | \
                     tee /etc/apt/sources.list.d/docker.list > /dev/null && \
                     apt-get update && \
                     apt-get install -y docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin && \
                     systemctl enable docker && systemctl start docker" "Instalando y habilitando Docker..."
        configure_docker_logs
    fi
    
    run_command "apt-get install -y git curl wget" "Instalando herramientas base (git, curl, wget)..."
    
    show_success "Dependencias instaladas"
}

# Configurar tamaño de los logs de Docker para evitar llenar el disco
configure_docker_logs() {
    local config_file="/etc/docker/daemon.json"
    show_message "Configurando límites de logs en Docker..."
    cat > "$config_file" <<EOF
{
  "log-driver": "json-file",
  "log-opts": {
    "max-size": "10m",
    "max-file": "3"
  }
}
EOF
    run_command "systemctl restart docker" "Reiniciando Docker para aplicar configuración de logs..."
}

# Instalar herramientas de seguridad
install_server_tools() {
    show_message "Instalando herramientas de seguridad en el servidor (UFW, Fail2Ban, RKHunter, CHKRootkit)..."
    
    # Instalación
    run_command "apt-get install -y fail2ban rkhunter chkrootkit" "Instalando paquetes de seguridad..."
    
    # Fail2Ban
    run_command "systemctl enable fail2ban && systemctl start fail2ban" "Configurando Fail2Ban..."
    
    # RKHunter
    run_command "rkhunter --update && rkhunter --propupd" "Actualizando y configurando RKHunter..."

    # UFW Firewall
    show_message "Configurando UFW Firewall..."
    ufw allow ssh; ufw allow http; ufw allow https
    echo "y" | ufw enable >/dev/null 2>&1
    
    show_success "Herramientas de seguridad instaladas y configuradas"
}

# Inicializar Docker Swarm si no está activo
initialize_docker_swarm() {
    show_message "Verificando estado de Docker Swarm..."
    
    if ! docker info 2>/dev/null | grep -q "Swarm: active"; then
        run_command "docker swarm init --advertise-addr \$(hostname -I | awk '{print \$1}')" "Inicializando Docker Swarm..."
    else
        show_message "Docker Swarm ya está activo"
    fi
}

# Crear redes de Docker para Swarm
create_docker_networks() {
    show_message "Creando redes Docker para Swarm..."
    
    # Red Frontend (Para Traefik y servicios públicos)
    if ! docker network ls 2>/dev/null | grep -q "frontend"; then
        run_command "docker network create --driver overlay --attachable frontend" "Creando red frontend..."
    else
        show_warning "La red 'frontend' ya existe"
    fi
    
    # Red Backend (Para bases de datos y servicios internos)
    if ! docker network ls 2>/dev/null | grep -q "backend"; then
        run_command "docker network create --driver overlay --attachable backend" "Creando red backend..."
    else
        show_warning "La red 'backend' ya existe"
    fi
}

# Función para crear directorios para volúmenes
create_volume_directories() {
    local stack_file=$1
    local tool_name=$2

    show_message "Creando directorios para volúmenes de $tool_name..."
    local volume_paths=$(grep -oP "device: \K/[^\s]+" "$stack_file" | sort | uniq)

    if [ -z "$volume_paths" ]; then return; fi

    for path in $volume_paths; do
        run_command "mkdir -p \"$path\"" "Creando directorio $path..."
    done
}

# Función LOCAL para obtener el stack file (sustituye a download_from_api)
get_stack_content() {
    local tool_name=$1
    local local_path=$2
    local stack_filename="$tool_name-stack.yml"
    local source_path="$SCRIPT_DIR/stacks/$stack_filename"

    show_message "Buscando $stack_filename en la carpeta 'stacks/'..."

    if [ ! -f "$source_path" ]; then
        show_error "Archivo no encontrado: $source_path. Asegúrate de tener la carpeta 'stacks/' con todos los YAMLs."
        cleanup 1
        exit 1
    fi
    
    # Copiar el archivo local
    run_command "cp \"$source_path\" \"$local_path\"" "Copiando archivo local..."
    register_temp_file "$local_path"
}

# --- Inicialización de Chatwoot (Corrección Avanzada) ---

# Función para inicializar la base de datos de Chatwoot
initialize_chatwoot_database() {
    show_message "Inicializando base de datos de Chatwoot (Proceso avanzado)..."
    
    # 1. Verificar Redis (Requisito)
    local container_id=$(docker ps -q --filter "name=redis_redis-server")
    if [ -z "$container_id" ]; then
        show_error "Redis no está desplegado. Chatwoot requiere que el stack 'redis' esté activo."
        return 1
    fi

    show_message "Esperando disponibilidad de Redis..."
    local redis_ready=false
    local attempt=0; local max_attempts=60
    while [ $attempt -lt $max_attempts ] && [ "$redis_ready" = false ]; do
        if docker exec "$container_id" redis-cli ping 2>/dev/null | grep -q "PONG"; then
            redis_ready=true; show_success "Redis está listo"
        else
            sleep 5; attempt=$((attempt + 1))
        fi
    done
    if [ "$redis_ready" = false ]; then
        show_error "Redis no está disponible después de 5 minutos."; return 1
    fi
    
    # 2. Crear stack temporal solo para inicializar la DB
    local init_stack_file="/tmp/chatwoot-init-stack.yml"
    cat > "$init_stack_file" << EOF
version: '3.8'

services:
  chatwoot-postgres:
    image: pgvector/pgvector:pg16
    environment:
      - POSTGRES_DB=chatwoot
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=$COMMON_PASSWORD
      - POSTGRES_INITDB_ARGS=--encoding=UTF-8 --lc-collate=C --lc-ctype=C
    volumes:
      - chatwoot_postgres:/home/docker/chatwoot/postgres_data
    deploy:
      replicas: 1
      placement:
        constraints: [node.role == manager]
    networks: [backend]

  chatwoot-init:
    image: chatwoot/chatwoot:latest
    command: ["bundle", "exec", "rails", "db:chatwoot_prepare"]
    environment:
      - POSTGRES_HOST=chatwoot-postgres
      - POSTGRES_PORT=5432
      - POSTGRES_DATABASE=chatwoot
      - POSTGRES_USERNAME=postgres
      - POSTGRES_PASSWORD=$COMMON_PASSWORD
      - REDIS_URL=redis://redis-server:6379/4
      - SECRET_KEY_BASE=$SECRET_KEY
      - RAILS_ENV=production
      - NODE_ENV=production
    networks: [backend]
    depends_on: [chatwoot-postgres]
    deploy:
      restart_policy: {condition: none}
      placement: {constraints: [node.role == manager]}

networks:
  backend: {external: true}

volumes:
  chatwoot_postgres: {external: true}
EOF
    
    register_temp_file "$init_stack_file"
    
    # 3. Asegurar el volumen para la inicialización (requerido por el stack de init)
    docker volume create --driver local --opt type=none --opt device=/home/docker/chatwoot/postgres_data --opt o=bind chatwoot_postgres >/dev/null 2>&1
    
    # 4. Desplegar el stack de inicialización
    run_command "docker stack deploy -c \"$init_stack_file\" chatwoot-init" "Desplegando stack de inicialización temporal..."

    # 5. Esperar la disponibilidad de PostgreSQL
    show_message "Esperando a que PostgreSQL inicie..."
    local postgres_container_id=""
    local pg_ready=false; local pg_attempt=0; local max_pg_wait=60
    while [ $pg_attempt -lt $max_pg_wait ] && [ -z "$postgres_container_id" ]; do
        postgres_container_id=$(docker ps -q --filter "name=chatwoot-init_chatwoot-postgres")
        if [ -z "$postgres_container_id" ]; then sleep 5; pg_attempt=$((pg_attempt + 1)); fi
    done
    
    if [ -z "$postgres_container_id" ]; then show_error "No se pudo iniciar PostgreSQL."; docker stack rm chatwoot-init >/dev/null 2>&1; return 1; fi

    show_message "Verificando conexión a PostgreSQL..."
    while [ $pg_attempt -lt $max_pg_wait ] && [ "$pg_ready" = false ]; do
        if docker exec "$postgres_container_id" pg_isready -U postgres -h localhost >/dev/null 2>&1; then
            pg_ready=true; show_success "PostgreSQL está listo."
            sleep 10 # Espera adicional de estabilidad
        else
            sleep 5; pg_attempt=$((pg_attempt + 1))
        fi
    done
    if [ "$pg_ready" = false ]; then show_error "PostgreSQL no disponible."; docker stack rm chatwoot-init >/dev/null 2>&1; return 1; fi
        
    # 6. Esperar a que termine la inicialización
    show_message "Esperando a que el contenedor de inicialización complete 'db:chatwoot_prepare'..."
    local init_complete=false; local max_wait=600; local wait_time=0
    while [ $wait_time -lt $max_wait ] && [ "$init_complete" = false ]; do
        local service_status=$(docker service ps chatwoot-init_chatwoot-init --format "{{.CurrentState}}" --no-trunc 2>/dev/null | head -1)
        if echo "$service_status" | grep -q "Complete"; then init_complete=true; show_success "Inicialización completada."; break
        elif echo "$service_status" | grep -q "Failed"; then show_error "La inicialización de la base de datos falló."; break
        fi
        sleep 10; wait_time=$((wait_time + 10))
    done
    
    # 7. Limpiar el stack de inicialización
    show_message "Limpiando stack temporal de inicialización..."
    docker stack rm chatwoot-init >/dev/null 2>&1
    sleep 15
    docker volume rm chatwoot_postgres >/dev/null 2>&1 # El stack final creará su propio volumen
    
    if [ "$init_complete" = true ]; then return 0
    else return 1
    fi
}


# Función para instalar una herramienta con Docker Swarm
install_docker_tool() {
    local tool_name=$1
    local default_subdomain=$2
    
    show_message "Configurando $tool_name..."
    local tool_dir="$DOCKER_DIR/$tool_name"
    mkdir -p $tool_dir
    cd $tool_dir || { show_error "No se pudo acceder al directorio $tool_dir"; cleanup 1; exit 1; }
    
    # 1. Solicitar Subdominio
    read -p "Ingrese el subdominio para $tool_name [$default_subdomain]: " SUBDOMAIN
    SUBDOMAIN=${SUBDOMAIN:-$default_subdomain}
    
    local subdomain_file="$tool_dir/.subdomain"
    echo "$SUBDOMAIN" > "$subdomain_file"; register_temp_file "$subdomain_file"
    
    # 2. Obtener Stack File (LOCAL)
    local stack_file="$tool_dir/$tool_name-stack.yml"
    get_stack_content "$tool_name" "$stack_file" # Llama a la función local

    # 3. Reemplazar variables
    local deploy_file="$tool_dir/$tool_name-deploy.yml"
    cp "$stack_file" "$deploy_file"
    register_temp_file "$deploy_file"

    sed -i "s|REPLACE_PASSWORD|$COMMON_PASSWORD|g" "$deploy_file"
    sed -i "s|REPLACE_SUBDOMAIN|$SUBDOMAIN|g" "$deploy_file"
    sed -i "s|REPLACE_DOMAIN|$BASE_DOMAIN|g" "$deploy_file"
    sed -i "s|REPLACE_SECRET_KEY|$SECRET_KEY|g" "$deploy_file"

    # 4. Crear directorios de volúmenes
    create_volume_directories "$deploy_file" "$tool_name"
    
    # 5. Tratamiento especial para Chatwoot (Inicialización DB)
    if [ "$tool_name" = "chatwoot" ]; then
        if initialize_chatwoot_database; then
            show_success "Base de datos de Chatwoot inicializada para el despliegue final."
        else
            show_error "Error crítico al inicializar la base de datos de Chatwoot."
            cleanup 1; exit 1
        fi
    fi
    
    # 6. Desplegar stack
    run_command "docker stack deploy -c \"$deploy_file\" $tool_name" "Desplegando $tool_name..."
    
    cd $DOCKER_DIR || { show_error "No se pudo volver al directorio principal $DOCKER_DIR"; cleanup 1; exit 1; }
}

# --- Flujo Principal ---

main() {
    echo -e "\n${GREEN}===========================================${NC}"
    echo -e "${GREEN}  🚀 INICIANDO INSTALADOR DOCKER MAJORADO 🚀  ${NC}"
    echo -e "${GREEN}===========================================${NC}\n"

    # 1. Chequeo y Setup
    if [ "$EUID" -ne 0 ]; then show_error "Este script debe ejecutarse como root."; cleanup 1; exit 1; fi
    mkdir -p $DOCKER_DIR; cd $DOCKER_DIR || { show_error "No se pudo acceder a $DOCKER_DIR"; cleanup 1; exit 1; }

    # 2. Verificar archivos de stacks locales
    for stack in "${REQUIRED_STACKS[@]}"; do
        if [ ! -f "$SCRIPT_DIR/stacks/$stack" ]; then
            show_error "Falta un archivo crucial: 'stacks/$stack'. Por favor, crea la carpeta 'stacks/' junto al script y añade todos los archivos YAML necesarios."
            cleanup 1; exit 1
        fi
    done
    show_success "Archivos de configuración de stacks encontrados localmente."

    # 3. Solicitar y Guardar Credenciales
    show_message "Configuración inicial"
    read -p "Ingrese la contraseña común para todas las herramientas: " COMMON_PASSWORD
    if [ -z "$COMMON_PASSWORD" ]; then show_error "La contraseña no puede estar vacía"; cleanup 1; exit 1; fi

    read -p "Ingrese el dominio base (ejemplo: midominio.com): " BASE_DOMAIN
    if [ -z "$BASE_DOMAIN" ]; then show_error "El dominio no puede estar vacío"; cleanup 1; exit 1; fi

    DEFAULT_SECRET_KEY=$(generate_random_key)
    read -p "Ingrese una clave secreta de 32 caracteres (o Enter para usar la generada): " SECRET_KEY
    SECRET_KEY=${SECRET_KEY:-$DEFAULT_SECRET_KEY}
    if [ ${#SECRET_KEY} -ne 32 ]; then show_warning "Clave proporcionada no tiene 32 caracteres. Usando la generada."; SECRET_KEY=$DEFAULT_SECRET_KEY; fi
    show_message "Clave secreta utilizada: $SECRET_KEY"

    env_global_file="$DOCKER_DIR/.env.global"
    cat > $env_global_file << EOL
COMMON_PASSWORD=$COMMON_PASSWORD
BASE_DOMAIN=$BASE_DOMAIN
SECRET_KEY=$SECRET_KEY
EOL

    # 4. Instalación de Infraestructura y Herramientas
    install_dependencies
    initialize_docker_swarm
    install_server_tools
    create_docker_networks
    
    # 5. Despliegue de Stacks en orden de dependencia
    show_message "Instalando servicios en orden de dependencias..."
    INSTALL_ORDER=("traefik" "redis" "postgres" "portainer" "n8n" "evoapi" "chatwoot")
    
    for tool_name in "${INSTALL_ORDER[@]}"; do
        # Encontrar el subdominio predeterminado
        default_subdomain=""
        for j in "${!AVAILABLE_TOOLS[@]}"; do
            if [ "${AVAILABLE_TOOLS[$j]}" = "$tool_name" ]; then
                default_subdomain="${DEFAULT_SUBDOMAINS[$j]}"
                break
            fi
        done
        
        install_docker_tool "$tool_name" "$default_subdomain"
        
        # Pausa para estabilización
        if [ "$tool_name" = "postgres" ] || [ "$tool_name" = "redis" ]; then
            show_message "Esperando a que $tool_name se estabilice..."
            sleep 15
        fi
    done

    # 6. Mensaje final y limpieza
    echo ""
    show_success "🎉 ¡INSTALACIÓN COMPLETADA! 🎉"
    echo ""
    echo "Accede a tus servicios en los siguientes URLs:"
    
    for tool_name in "${SELECTED_TOOLS[@]}"; do
        subdomain_file="$DOCKER_DIR/$tool_name/.subdomain"
        if [ -f "$subdomain_file" ]; then
            subdomain=$(cat "$subdomain_file")
        fi
        TOOL_NAME_CAPITALIZED=$(echo "$tool_name" | awk '{print toupper(substr($0,1,1))tolower(substr($0,2))}')
        echo "- ${TOOL_NAME_CAPITALIZED}: https://$subdomain.$BASE_DOMAIN"
    done
    
    echo ""
    echo "Información de credenciales guardada en: $DOCKER_DIR/.env.global"
    
    cleanup 0 true
}

# Ejecutar función principal
main
