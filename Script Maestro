#!/usr/bin/env bash

# =================================================================================
# INSTALADOR AUTÓNOMO FINAL (v9.3.0 - SOLUCIÓN PARA ERROR DE ESCAPE DE SHELL EN YAML)
# Se utiliza un Here-Doc anidado para pasar el bloque de configuración YAML.
# =================================================================================

# ------------------------------
# 1. Configuración de Variables
# ------------------------------
RED='\033[0;31m'
GREEN='\033[0;32m'
BLUE='\033[0;34m'
NC='\033[0m'

# TUS VARIABLES (Hardcodeadas)
DOCKER_DIR="/home/docker"
COMMON_PASSWORD="Adel14881599"        
SECRET_KEY="wKStf8R8fAt7W78olV8D8kU5rdiqr31O"
BASE_DOMAIN="queennovedad.shop"

# Definición de URLs (solo Chatwoot es relevante ahora)
declare -gA STACK_URLS=(
    [chatwoot]="https://github.com/user-attachments/files/22956465/chatwoot-stack.yml"
)
declare -gA SUBDOMAINS=(
    [chatwoot]="chat"
)

# ------------------------------
# 2. Funciones Auxiliares
# ------------------------------
show_info() { echo -e "${BLUE}[INFO]${NC} $1"; }
show_success() { echo -e "${GREEN}[SUCCESS]${NC} $1"; }
show_error() { echo -e "${RED}[ERROR]${NC} $1"; exit 1; }
execute() { local cmd="$1"; show_info "-> Ejecutando: $cmd"; eval "$cmd"; local code=$?; if [ $code -ne 0 ]; then show_error "Comando falló con código $code: $cmd"; fi; }

# Función de Despliegue de Chatwoot (solo para reejecución)
substitute_and_deploy_chatwoot() {
    local tool_name="chatwoot"
    local subdomain="${SUBDOMAINS[$tool_name]}"
    local stack_url="${STACK_URLS[$tool_name]}"
    local tool_dir="$DOCKER_DIR/$tool_name"
    local stack_file="$tool_dir/$tool_name-stack.yml"
    local deploy_file="$tool_dir/$tool_name-deploy.yml"

    show_info "Re-desplegando stack: $tool_name"
    
    execute "mkdir -p \"$tool_dir\""
    execute "mkdir -p \"$tool_dir/chatwoot_storage\""

    show_info "Descargando y sustituyendo plantilla para Chatwoot..."
    if ! curl -fsSL "$stack_url" -o "$stack_file"; then
        show_error "No se pudo descargar la plantilla de Chatwoot."
    fi
    execute "cp \"$stack_file\" \"$deploy_file\""
    execute "sed -i 's#REPLACE_PASSWORD#\"$COMMON_PASSWORD\"#g' \"$deploy_file\""
    execute "sed -i 's#REPLACE_SECRET_KEY#\"$SECRET_KEY\"#g' \"$deploy_file\""
    execute "sed -i 's#REPLACE_SUBDOMAIN#$subdomain#g' \"$deploy_file\""
    execute "sed -i 's#REPLACE_DOMAIN#$BASE_DOMAIN#g' \"$deploy_file\""
    show_success "Variables de Chatwoot sustituidas."

    show_info "Desplegando Chatwoot en Docker Swarm..."
    execute "docker stack deploy -c \"$deploy_file\" \"$tool_name\""
    show_success "Chatwoot instalado correctamente."
}

# ------------------------------
# 3. Función de Inicialización de Chatwoot (FIX V9.3.0 - Here-Doc Anidado)
# ------------------------------
initialize_chatwoot_db() {
    show_info "Iniciando proceso de inicialización de la base de datos de Chatwoot..."
    
    local service_name="chatwoot_rails"

    show_info "Esperando 45 segundos para asegurar que el contenedor de Rails esté corriendo y PostgreSQL esté listo..."
    sleep 45

    show_info "Buscando ID del contenedor en ejecución para el servicio $service_name..."
    local container_id
    container_id=$(docker ps -q --filter name=${service_name} --format "{{.ID}}" | head -n 1)

    if [ -z "$container_id" ]; then
        show_error "No se encontró ningún contenedor corriendo para el servicio $service_name."
    fi

    show_info "Contenedor ID encontrado: $container_id. Aplicando FIX de YAML e inicializando DB..."
    
    # ----------------------------------------------------
    # FIX V9.3.0: USAR UN HERE-DOC ANIDADO
    # Define el comando completo de parcheo con el contenido YAML.
    # El uso de 'EOF_CMD' y 'YAML_CONTENT_EOF' garantiza que el shell externo no interprete nada.
    # ----------------------------------------------------
    local db_patch_command=$(cat <<'EOF_CMD'
cat <<'YAML_CONTENT_EOF' > /app/config/database.yml
production:
  adapter: postgresql
  encoding: unicode
  pool: <%= ENV.fetch("RAILS_MAX_THREADS") { 5 } %>
  host: <%= ENV.fetch("POSTGRES_HOST") %>
  port: <%= ENV.fetch("POSTGRES_PORT") { 5432 } %>
  database: <%= ENV.fetch("POSTGRES_DATABASE") %>
  username: <%= ENV.fetch("POSTGRES_USER") %>
  password: <%= ENV.fetch("POSTGRES_PASSWORD") %>
YAML_CONTENT_EOF
EOF_CMD
)

    show_info "1/4: Sobreescribiendo /app/config/database.yml con una configuración mínima válida (Usando Here-Doc Anidado)..."
    
    # Ejecutar el comando completo (el Here-Doc) dentro del contenedor
    if ! docker exec "$container_id" /bin/sh -c "$db_patch_command"; then
        show_error "El paso de sobrescritura de database.yml falló. (Error de shell/escape, la imagen de Chatwoot tiene un problema fundamental)."
    fi
    show_success "database.yml sobreescrito con éxito."

    # Comando 2: db:create (Crea la base de datos)
    show_info "2/4: Ejecutando db:create..."
    if ! docker exec -e RAILS_ENV=production "$container_id" /bin/sh -c "bundle exec rails db:create"; then
        show_error "db:create falló. No se pudo crear la base de datos."
    fi
    show_success "db:create completado."

    # Comando 3: db:migrate (Aplica las migraciones)
    show_info "3/4: Ejecutando db:migrate..."
    if ! docker exec -e RAILS_ENV=production "$container_id" /bin/sh -c "bundle exec rails db:migrate"; then
        show_error "db:migrate falló. No se pudieron aplicar las migraciones."
    fi
    show_success "db:migrate completado."

    # Comando 4: db:seed (Carga los datos iniciales, usuarios, etc.)
    show_info "4/4: Ejecutando db:seed..."
    if ! docker exec -e RAILS_ENV=production "$container_id" /bin/sh -c "bundle exec rails db:seed"; then
        show_error "db:seed falló. No se pudo cargar la configuración inicial."
    fi
    show_success "db:seed completado."
    
    show_success "Inicialización de base de datos completada exitosamente. Chatwoot debería estar listo."
}


# ------------------------------
# 4. Lógica Principal
# ------------------------------

substitute_and_deploy_chatwoot
initialize_chatwoot_db

# ------------------------------
# 5. Resultados Finales
# ------------------------------

show_success "¡Instalación de Chatwoot COMPLETADA! 🎉"
echo ""
echo "Accede a Chatwoot en: https://chat.$BASE_DOMAIN"
echo "Contraseña de base de datos/Redis: $COMMON_PASSWORD"
echo ""
