# =================================================================================
# BLOQUE DE INSTALACIÓN MAESTRO (v6.0.0 - FLUIDO Y LIMPIO)
# Usa este bloque para evitar el error de sintaxis del repositorio.
# =================================================================================

# 1. DEFINE AQUÍ TUS CREDENCIALES
export INSTALL_PASSWORD="Adel14881599"
export INSTALL_DOMAIN="queennovedad.shop"
export INSTALL_SECRET_KEY="wKStf8R8fAt7W78olV8D8kU5rdiqr31O" 

# 2. Guardar el código final del script maestro mejorado (código sin error de caracter)
cat > unified_installer_master_v6.sh <<'EOF'
#!/usr/bin/env bash
# =================================================================================
# UNIFIED INSTALLER SCRIPT (v6.0.0 - MAESTRO FINAL NO INTERACTIVO)
# - Lee configuracion solo de variables de entorno.
# =================================================================================

set -euo pipefail

SCRIPT_VERSION="6.0.0-FINAL-MASTER"

# Colores y Utilidades
RED='\033[0;31m'; GREEN='\033[0;32m'; YELLOW='\033[0;33m'; BLUE='\033[0;34m'; NC='\033[0m'
show_message() { echo -e "${BLUE}[INFO]${NC} $1"; }
show_error() { echo -e "${RED}[ERROR]${NC} $1"; }
show_success() { echo -e "${GREEN}[SUCCESS]${NC} $1"; }
generate_random_key() { tr -dc 'A-Za-z0-9' </dev/urandom | head -c 32; }
register_temp_file() { TEMP_FILES+=("$1"); }

# Variables Globales
SUDO=""
DOCKER_DIR="/home/docker"
SCRIPT_PATH=$(readlink -f "$0")
TEMP_FILES=()
DOWNLOAD_TIMEOUT=30
declare -a CUSTOM_SUBDOMAINS
COMMON_PASSWORD=""
BASE_DOMAIN=""
SECRET_KEY=""

# Definiciones de Herramientas y URLs (Mantenidas)
declare -gA STACK_URLS=(
    [chatwoot]="https://github.com/user-attachments/files/22956465/chatwoot-stack.yml"
    [evoapi]="https://github.com/user-attachments/files/22956481/evoapi-stack.yml"
    [n8n]="https://github.com/user-attachments/files/22956487/n8n-stack.yml"
    [portainer]="https://github.com/user-attachments/files/22956492/portainer-stack.yml"
    [postgres]="https://github.com/user-attachments/files/22956495/postgres-stack.yml"
    [redis]="https://github.com/user-attachments/files/22956503/redis-stack.yml"
    [traefik]="https://github.com/user-attachments/files/22956506/traefik-stack.yml"
)
AVAILABLE_TOOLS=("traefik" "portainer" "redis" "postgres" "n8n" "evoapi" "chatwoot")
SELECTED_TOOLS=("traefik" "portainer" "redis" "postgres" "n8n" "evoapi" "chatwoot")
DEFAULT_SUBDOMAINS=("proxy" "admin" "redis" "postgres" "n8" "evoapi" "chat")


# -------------------------------
# FUNCIONES DE EJECUCIÓN Y LIMPIEZA
# -------------------------------

# Función de ejecución de comandos (Mejorada para transparencia)
run_command() {
    local cmd="$1"
    local msg="$2"
    
    show_message "$msg"
    
    local full_cmd
    # Asegura que SUDO se use correctamente, excepto para comandos docker internos
    if [ -n "$SUDO" ] && [[ "$cmd" != docker* ]] && [[ "$cmd" != *"$SUDO"* ]]; then
        full_cmd="$SUDO $cmd"
    else
        full_cmd="$cmd"
    fi
    
    echo -e "  -> Ejecutando: \033[0;33m$full_cmd\033[0m"

    if $full_cmd; then
        show_success "Completado: $msg"
        return 0
    else
        local exit_status=$?
        show_error "Comando falló con código $exit_status: $full_cmd"
        return $exit_status
    fi
}

cleanup() {
    local exit_code=$1; local delete_stacks=${2:-false} 
    show_message "Realizando limpieza antes de salir..."
    
    # Limpieza de archivos temporales
    if [ ${#TEMP_FILES[@]} -gt 0 ]; then
        for file in "${TEMP_FILES[@]}"; do
            if [ -f "$file" ]; then $SUDO rm -f "$file"; fi
        done
    fi
    
    # Eliminación de stacks y archivos de despliegue
    if [ "$delete_stacks" = true ]; then
        show_message "Eliminando stacks de Docker Swarm..."
        for tool_name in "${SELECTED_TOOLS[@]}"; do
            run_command "docker stack rm $tool_name" "Eliminando stack $tool_name..." || true
            local tool_dir="$DOCKER_DIR/$tool_name"
            $SUDO rm -f "$tool_dir/."subdomain "$tool_dir/$tool_name-deploy.yml" "$tool_dir/$tool_name-stack.yml.raw"
        done
        $SUDO rm -f "$DOCKER_DIR/.env.global"
    fi
    
    if [ $exit_code -ne 0 ]; then show_error "La instalacion ha fallado. Revise los logs para mas informacion."; fi
    
    # Lógica de autodestrucción
    if [ $exit_code -ne 0 ] || [ "$delete_stacks" = true ]; then
        local self_destruct_script="/tmp/self_destruct_$$_$(date +%s).sh"
        cat > "$self_destruct_script" << EOF
#!/bin/bash
sleep 1
rm -f "$SCRIPT_PATH"
if [ -f "$SCRIPT_PATH" ]; then
  sudo rm -f "$SCRIPT_PATH"
fi
rm -f "\$0"
EOF
        chmod +x "$self_destruct_script"
        nohup "$self_destruct_script" >/dev/null 2>&1 &
    fi
    
    show_message "Limpieza completada"
}

trap 'cleanup 1 false; exit 1' SIGHUP SIGINT SIGQUIT SIGTERM
trap 'cleanup 1 false; exit 1' ERR

# -------------------------------
# FUNCIONES DE INSTALACIÓN BASE Y SEGURIDAD
# -------------------------------

install_dependencies() {
    show_message "Verificando e instalando dependencias (curl, wget, jo, perl, Docker)..."
    run_command "apt-get update -y" "Actualizando lista de paquetes..."
    run_command "apt-get install -y ca-certificates curl gnupg lsb-release apt-transport-https software-properties-common jo perl" "Instalando utilidades y requisitos..."

    if ! command -v docker &> /dev/null; then
        local OS_DETECTED
        if [ -f /etc/os-release ]; then . /etc/os-release; OS_DETECTED=$ID; else OS_DETECTED="debian"; fi
        
        show_message "Instalando Docker..."
        $SUDO install -m 0755 -d /etc/apt/keyrings
        run_command "curl -fsSL https://download.docker.com/linux/$OS_DETECTED/gpg | $SUDO gpg --dearmor -o /etc/apt/keyrings/docker.gpg" "Descargando clave GPG de Docker..."
        echo \
"deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/$OS_DETECTED \
$(lsb_release -cs) stable" | $SUDO tee /etc/apt/sources.list.d/docker.list > /dev/null
        run_command "apt-get update -y && apt-get install -y docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin" "Instalando paquetes de Docker..."
    else
        show_success "Docker ya está instalado."
    fi
    
    run_command "systemctl enable docker" "Habilitando servicio Docker..."
    run_command "systemctl start docker" "Iniciando servicio Docker..."
    
    # Configuración de logs y Swarm (fusionada para ser más limpia)
    local config_file="/etc/docker/daemon.json"
    $SUDO cat > "$config_file" <<EOF
{
  "log-driver": "json-file", "log-opts": {"max-size": "10m", "max-file": "3"}
}
EOF
    run_command "systemctl restart docker" "Reiniciando Docker para aplicar configuración de logs..."
    
    initialize_docker_swarm # Llamada de Swarm aquí para flujo lógico
}

initialize_docker_swarm() {
    show_message "Verificando estado de Docker Swarm..."
    if ! docker info 2>/dev/null | grep -q "Swarm: active"; then
        run_command "docker swarm init --advertise-addr \$(hostname -I | awk '{print \$1}')" "Inicializando Docker Swarm..."
    else
        show_message "Docker Swarm ya esta activo"
    fi
}

install_server_tools() {
    show_message "Instalando herramientas de seguridad en el servidor..."
    # Configuración de seguridad (Fail2Ban, RKHunter, UFW)
    run_command "apt-get install -y fail2ban && systemctl enable fail2ban && systemctl start fail2ban" "Instalando y activando Fail2Ban..."
    run_command "apt-get install -y rkhunter" "Instalando RKHunter..."
    local config_file="/etc/rkhunter.conf"
    run_command "$SUDO sed -i 's/^UPDATE_MIRRORS=.*/UPDATE_MIRRORS=1/' \"$config_file\" && $SUDO sed -i 's/^MIRRORS_MODE=.*/MIRRORS_MODE=0/' \"$config_file\" && $SUDO sed -i 's|^WEB_CMD=.*|WEB_CMD=\"\"|' \"$config_file\"" "Configurando RKHunter..."
    run_command "rkhunter --update" "Actualizando RKHunter..."
    run_command "rkhunter --propupd" "Actualizando base de datos de propiedades de RKHunter..."
    run_command "apt-get install -y chkrootkit" "Instalando CHKRootkit..."
    run_command "apt-get install -y ufw" "Instalando UFW..."
    run_command "ufw allow ssh && ufw allow http && ufw allow https && echo 'y' | ufw enable" "Configurando y activando reglas básicas de UFW..."
    show_success "Herramientas de seguridad instaladas correctamente"
}

create_docker_networks() {
    show_message "Creando redes Docker para Swarm..."
    if ! docker network ls 2>/dev/null | grep -q "frontend"; then
        run_command "docker network create --driver overlay --attachable frontend" "Creando red frontend..."
    else
        show_warning "La red 'frontend' ya existe"
    fi
    if ! docker network ls 2>/dev/null | grep -q "backend"; then
        run_command "docker network create --driver overlay --attachable backend" "Creando red backend..."
    else
        show_warning "La red 'backend' ya existe"
    fi
}

# -------------------------------
# FUNCIONES DE DESPLIEGUE (Chatwoot con lógica robusta)
# -------------------------------

download_file() {
    local url="$1" file="$2"
    show_message "Descargando $url -> $file"
    local download_cmd
    if command -v curl >/dev/null 2>&1; then download_cmd="curl --fail --location --max-time ${DOWNLOAD_TIMEOUT} -sS '$url' -o '$file'";
    elif command -v wget >/dev/null 2>&1; then download_cmd="wget -q --timeout=${DOWNLOAD_TIMEOUT} -O '$file' '$url'";
    else show_error "Ni curl ni wget estan disponibles."; return 3; fi
    if ! eval "$download_cmd"; then show_error "Fallo al descargar $url"; return 2; fi
    show_success "Descargado: $file"
    return 0
}

sanitize_yaml() {
    local infile="$1" outfile="$2"
    cp -f "$infile" "${infile}.raw" 
    cp -f "$infile" "$outfile"
    show_message "Saneando $outfile de secretos..."
    # Reemplaza claves largas por marcador para Portainer
    perl -0777 -pi -e 's/([A-Z_]+)\s*[:=]\s*([A-Za-z0-9_\-\.\/]{32,})/\1: <REPLACE_ME>/g' "$outfile" || true
    show_success "Saneado: $outfile"
}

create_volume_directories() {
    local stack_file=$1 tool_name=$2
    show_message "Creando directorios para volúmenes de $tool_name..."
    local volume_paths=$(grep -oP "device: \K/[^\s]+" "$stack_file" | sort | uniq)
    for path in $volume_paths; do run_command "mkdir -p \"$path\"" "Creando directorio $path..."; done
}

# Lógica de Chatwoot (Mantiene el chequeo de Redis y PostgreSQL)
initialize_chatwoot_database() {
    local tool_name="chatwoot"
    local subdomain=$1
    
    show_message "Inicializando base de datos de Chatwoot (Verificación y Despliegue Temporal)..."
    
    # 1. Verificar Redis (espera hasta 5 minutos)
    show_message "Verificando disponibilidad de Redis..."
    local redis_ready=false; local max_attempts=60; local attempt=0; local container_id
    container_id=$(docker ps --filter "name=redis_redis" --format "{{.ID}}" | head -n 1)
    while [ $attempt -lt $max_attempts ] && [ "$redis_ready" = false ]; do
        if [ -n "$container_id" ]; then
            if docker exec "$container_id" redis-cli ping 2>/dev/null | grep -q "PONG"; then
                redis_ready=true; show_success "Redis está listo"; break
            fi
        fi
        sleep 5; attempt=$((attempt + 1));
        container_id=$(docker ps --filter "name=redis_redis" --format "{{.ID}}" | head -n 1)
    done
    if [ "$redis_ready" = false ]; then show_error "Redis no está disponible"; return 1; fi
    
    # 2. Crear y desplegar stack temporal para inicialización
    local init_stack_file="/tmp/chatwoot-init-stack.yml"
    $SUDO cat > "$init_stack_file" << EOF
version: '3.8'
services:
  chatwoot-postgres:
    image: pgvector/pgvector:pg16
    environment:
      - POSTGRES_DB=chatwoot; - POSTGRES_USER=postgres; - POSTGRES_PASSWORD=$COMMON_PASSWORD
      - POSTGRES_INITDB_ARGS=--encoding=UTF-8 --lc-collate=C --lc-ctype=C
    volumes:
      - chatwoot_postgres:/var/lib/postgresql/data
    deploy:
      replicas: 1; restart_policy: {condition: on-failure}; placement: {constraints: [- node.role == manager]}
    networks: [- backend]
  chatwoot-init:
    image: chatwoot/chatwoot:latest
    command: ["bundle", "exec", "rails", "db:chatwoot_prepare"]
    environment:
      - POSTGRES_HOST=chatwoot-postgres; - POSTGRES_DATABASE=chatwoot; - POSTGRES_USERNAME=postgres; - POSTGRES_PASSWORD=$COMMON_PASSWORD
      - REDIS_URL=redis://redis-server:6379/4; - SECRET_KEY_BASE=$SECRET_KEY; - RAILS_ENV=production; - NODE_ENV=production
    networks: [- backend]; depends_on: [- chatwoot-postgres]; deploy: {restart_policy: {condition: none}; placement: {constraints: [- node.role == manager]}}
networks: {backend: {external: true}}
volumes: {chatwoot_postgres: {driver: local; driver_opts: {type: none; device: /home/docker/chatwoot/postgres_data; o: bind}}}
EOF
    register_temp_file "$init_stack_file"
    run_command "docker stack deploy -c \"$init_stack_file\" chatwoot-init" "Desplegando stack temporal para inicialización..."
    
    # 3. Esperar a que la base de datos esté lista y la inicialización termine (Máx 10 minutos)
    local init_complete=false; local max_wait=600; local wait_time=0;
    show_message "Esperando inicialización de base de datos (Máx 10 minutos)..."
    while [ $wait_time -lt $max_wait ] && [ "$init_complete" = false ]; do
        local service_status=$(docker service ps chatwoot-init_chatwoot-init --format "{{.CurrentState}}" --no-trunc 2>/dev/null | head -1)
        if echo "$service_status" | grep -q "Complete"; then init_complete=true; break
        elif echo "$service_status" | grep -q "Failed"; then show_error "La inicialización falló"; break; fi
        sleep 10; wait_time=$((wait_time + 10));
    done
    
    # 4. Limpiar stack y finalizar
    show_message "Limpiando stack de inicialización..."
    docker stack rm chatwoot-init >/dev/null 2>&1; sleep 15
    
    if [ "$init_complete" = true ]; then show_success "Base de datos de Chatwoot inicializada correctamente"; return 0;
    else show_error "La inicialización de la base de datos no se completó"; return 1; fi
}

install_docker_tool() {
    local tool_name=$1; local default_subdomain=$2; local tool_index=$3

    show_message "Configurando $tool_name..."
    local tool_dir="$DOCKER_DIR/$tool_name"
    run_command "mkdir -p \"$tool_dir\"" "Creando directorio de la herramienta..."
    cd "$tool_dir" || exit 1
    
    # Subdominio no interactivo
    SUBDOMAIN=$default_subdomain
    CUSTOM_SUBDOMAINS[$tool_index]=$SUBDOMAIN
    subdomain_file="$tool_dir/.subdomain"; echo "$SUBDOMAIN" > "$subdomain_file"; register_temp_file "$subdomain_file"

    local stack_url="${STACK_URLS[$tool_name]}"; local stack_file="$tool_dir/$tool_name-stack.yml"; local deploy_file="$tool_dir/$tool_name-deploy.yml"

    if ! download_file "$stack_url" "$stack_file"; then exit 1; fi
    sanitize_yaml "$stack_file" "$deploy_file"; register_temp_file "$deploy_file"
    
    # Reemplazo de variables
    sed -i "s|<REPLACE_ME>|$COMMON_PASSWORD|g" "$deploy_file"
    sed -i "s|REPLACE_PASSWORD|$COMMON_PASSWORD|g" "$deploy_file"
    sed -i "s|REPLACE_SUBDOMAIN|$SUBDOMAIN|g" "$deploy_file"
    sed -i "s|REPLACE_DOMAIN|$BASE_DOMAIN|g" "$deploy_file"
    sed -i "s|REPLACE_SECRET_KEY|$SECRET_KEY|g" "$deploy_file"

    create_volume_directories "$deploy_file" "$tool_name"
    
    if [ "$tool_name" = "chatwoot" ]; then
        if ! initialize_chatwoot_database "$SUBDOMAIN"; then exit 1; fi
    fi
    
    run_command "docker stack deploy -c \"$deploy_file\" $tool_name" "Desplegando $tool_name..."
    cd "$DOCKER_DIR" || exit 1
}

# -------------------------------
# FLUJO PRINCIPAL (main)
# -------------------------------

# Chequeo de Root (Ejecutado al principio, fuera de main)
echo "=== Instalador Universal v$SCRIPT_VERSION ==="
if [ "$(id -u)" -ne 0 ]; then
    if ! command -v sudo >/dev/null 2>&1; then show_error "No eres root y 'sudo' no esta instalado."; exit 1; fi
    SUDO="sudo"; show_message "Ejecutando con sudo...";
else
    SUDO=""; show_message "Ejecutando como root...";
fi
if [ -f /etc/os-release ]; then . /etc/os-release; show_message "Sistema detectado: $PRETTY_NAME"; else show_error "No se pudo detectar el sistema operativo."; exit 1; fi


main() {
    
    # LECTURA DE VARIABLES DE ENTORNO (Completamente no interactivo)
    if [ -z "${INSTALL_PASSWORD:-}" ]; then show_error "❌ Contraseña no definida. Exporta INSTALL_PASSWORD."; exit 1; fi
    if [ -z "${INSTALL_DOMAIN:-}" ]; then show_error "❌ Dominio no definido. Exporta INSTALL_DOMAIN."; exit 1; fi
    
    COMMON_PASSWORD="${INSTALL_PASSWORD}"
    BASE_DOMAIN="${INSTALL_DOMAIN}"
    SECRET_KEY="${INSTALL_SECRET_KEY:-$(generate_random_key)}" # Genera si no se proporciona

    show_message "Configuracion (ENV VARS): Contraseña: ***, Dominio: $BASE_DOMAIN, Clave Secreta: $SECRET_KEY"

    run_command "mkdir -p \"$DOCKER_DIR\"" "Creando directorio principal..."
    cd "$DOCKER_DIR" || exit 1

    # Guardar variables en .env.global
    env_global_file="$DOCKER_DIR/.env.global"
    $SUDO cat > "$env_global_file" << EOL
COMMON_PASSWORD=$COMMON_PASSWORD
BASE_DOMAIN=$BASE_DOMAIN
SECRET_KEY=$SECRET_KEY
EOL
    register_temp_file "$env_global_file"

    # Instalación de dependencias y servicios base
    install_dependencies
    install_server_tools
    create_docker_networks

    # Instalación de herramientas en orden (Dependencias primero)
    INSTALL_ORDER=("traefik" "redis" "postgres" "portainer" "n8n" "evoapi" "chatwoot")
    show_message "Iniciando despliegue de stacks en Docker Swarm..."
    
    for tool_name in "${INSTALL_ORDER[@]}"; do
        default_subdomain=""
        tool_index=-1
        for j in "${!AVAILABLE_TOOLS[@]}"; do
            if [ "${AVAILABLE_TOOLS[$j]}" = "$tool_name" ]; then
                default_subdomain="${DEFAULT_SUBDOMAINS[$j]}"
                tool_index=$j
                break
            fi
        done

        if [ $tool_index -ge 0 ]; then
            install_docker_tool "$tool_name" "$default_subdomain" "$tool_index"
            
            # Pausa para estabilización
            if [ "$tool_name" = "postgres" ] || [ "$tool_name" = "redis" ]; then
                show_message "Esperando a que $tool_name se estabilice (15 segundos)..."
                sleep 15
            fi
        fi
    done

    # Resumen y Finalización
    echo ""
    show_success "¡Instalacion completada! Accede a tus servicios:"
    
    for i in "${!SELECTED_TOOLS[@]}"; do
        local tool_name="${SELECTED_TOOLS[$i]}"
        local tool_index=-1
        for j in "${!AVAILABLE_TOOLS[@]}"; do
            if [ "${AVAILABLE_TOOLS[$j]}" = "$tool_name" ]; then
                tool_index=$j
                break
            fi
        done

        if [ $tool_index -ge 0 ]; then
            local subdomain="${CUSTOM_SUBDOMAINS[$tool_index]}"
            echo "- ${tool_name^}: https://$subdomain.$BASE_DOMAIN"
        fi
    done

    echo "Credenciales guardadas en: $DOCKER_DIR/.env.global"
    
    cleanup 0 true
}

main
EOF

# 3. Dar permisos de ejecución y ejecutar el script
chmod +x unified_installer_master_v6.sh
./unified_installer_master_v6.sh
