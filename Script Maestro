#!/usr/bin/env bash
# =================================================================================
# SCRIPT DE DESPLIEGUE DIRECTO (SIN TOKEN - Basado en v3.0.2 y URLs directas)
# =================================================================================

SCRIPT_VERSION="4.0.0-MANUAL"

# Colores para mensajes
RED='\033[0;31m'
GREEN='\033[0;32m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Variables de entorno
DOCKER_DIR="/home/docker"
DOWNLOAD_TIMEOUT=30

# URLs para descarga de Stacks (URLs proporcionadas por el usuario)
declare -gA STACK_URLS=(
    [chatwoot]="https://github.com/user-attachments/files/22956465/chatwoot-stack.yml"
    [evoapi]="https://github.com/user-attachments/files/22956481/evoapi-stack.yml"
    [n8n]="https://github.com/user-attachments/files/22956487/n8n-stack.yml"
    [portainer]="https://github.com/user-attachments/files/22956492/portainer-stack.yml"
    [postgres]="https://github.com/user-attachments/files/22956495/postgres-stack.yml"
    [redis]="https://github.com/user-attachments/files/22956503/redis-stack.yml"
    [traefik]="https://github.com/user-attachments/files/22956506/traefik-stack.yml"
)

# Lista de herramientas y subdominios predeterminados
SELECTED_TOOLS=("traefik" "portainer" "redis" "postgres" "n8n" "evoapi" "chatwoot")
DEFAULT_SUBDOMAINS=("proxy" "admin" "redis" "postgres" "n8" "evoapi" "chat")
declare -gA CUSTOM_SUBDOMAINS_MAP=()
TEMP_FILES=()

# --- Funciones de Utilidad ---
show_message() { echo -e "${BLUE}[INFO]${NC} $1"; }
show_error() { echo -e "${RED}[ERROR]${NC} $1"; }
show_success() { echo -e "${GREEN}[SUCCESS]${NC} $1"; }

# Funci√≥n para descargar archivos
download_stack_file() {
    local tool_name=$1
    local local_path=$2
    local download_url=${STACK_URLS[$tool_name]}

    show_message "Descargando stack '$tool_name'..."
    if ! curl -fsSL --max-time $DOWNLOAD_TIMEOUT -o "$local_path" "$download_url"; then
        show_error "Error al descargar $tool_name desde $download_url"
        exit 1
    fi
    TEMP_FILES+=("$local_path")
    show_success "Archivo stack para $tool_name descargado correctamente"
    return 0
}

# Funci√≥n para sanitizar (reemplazar variables) el archivo de stack
sanitize_stack_file() {
    local stack_file=$1
    local tool_name=$2
    local subdomain=$3
    
    show_message "Sanitizando archivo $tool_name-stack.yml..."
    local full_domain="$subdomain.$BASE_DOMAIN"

    # --- Reemplazar Variables Est√°ticas ---
    
    # 1. Contrase√±as (basado en la l√≥gica del script 3.0.2)
    sed -i "s|N8N_ENCRYPTION_KEY=.*|N8N_ENCRYPTION_KEY=$SECRET_KEY|g" "$stack_file" 2>/dev/null
    sed -i "s|POSTGRES_PASSWORD=.*|POSTGRES_PASSWORD=$COMMON_PASSWORD|g" "$stack_file" 2>/dev/null
    sed -i "s|REDIS_PASSWORD=.*|REDIS_PASSWORD=$COMMON_PASSWORD|g" "$stack_file" 2>/dev/null
    sed -i "s|DB_POSTGRESDB_PASSWORD=.*|DB_POSTGRESDB_PASSWORD=$COMMON_PASSWORD|g" "$stack_file" 2>/dev/null
    sed -i "s|RAILS_INBOUND_EMAIL_PASSWORD=.*|RAILS_INBOUND_EMAIL_PASSWORD=$COMMON_PASSWORD|g" "$stack_file" 2>/dev/null
    sed -i "s|PORTAINER_ADMIN_PASSWORD=.*|PORTAINER_ADMIN_PASSWORD=$COMMON_PASSWORD|g" "$stack_file" 2>/dev/null
    
    # 2. Dominios (basado en la l√≥gica del script 3.0.2)
    sed -i "s|Host(\`proxy\.midominio\.com\`)|Host(\`$full_domain\`)|g" "$stack_file" 2>/dev/null # Traefik
    sed -i "s|N8N_HOST=.*$|N8N_HOST=$full_domain|g" "$stack_file" 2>/dev/null
    sed -i "s|N8N_EDITOR_BASE_URL=.*|N8N_EDITOR_BASE_URL=https://$full_domain|g" "$stack_file" 2>/dev/null
    sed -i "s|WEBHOOK_URL=https:\/\/webhook\..*|WEBHOOK_URL=https:\/\/webhook.$full_domain|g" "$stack_file" 2>/dev/null
    sed -i "s|HOST=.*$|HOST=$full_domain|g" "$stack_file" 2>/dev/null # EvoAPI
    sed -i "s|CHOOSETRAEFIKDOMAIN=.*$|CHOOSETRAEFIKDOMAIN=$full_domain|g" "$stack_file" 2>/dev/null
    sed -i "s|HOST_NAME=.*$|HOST_NAME=$full_domain|g" "$stack_file" 2>/dev/null # Chatwoot
    sed -i "s|APP_DOMAIN=.*$|APP_DOMAIN=$full_domain|g" "$stack_file" 2>/dev/null # Chatwoot

    # 3. FIX CR√çTICO: Redis Auth. 
    # Inyectar la contrase√±a en el COMANDO del redis-server
    if [ "$tool_name" = "redis" ]; then
        sed -i "s|command: redis-server --loglevel warning|command: redis-server --requirepass $COMMON_PASSWORD --loglevel warning|g" "$stack_file"
        show_message "FIX aplicado: requirepass para Redis Server."
        # Tambi√©n inyectar vars para RedisInsight
        sed -i "/image: redislabs\/redisinsight:latest/a\        environment:\n          - REDISINSIGHT_PASSWORD=$COMMON_PASSWORD\n          - REDIS_PASSWORD=$COMMON_PASSWORD" "$stack_file"
        show_message "FIX aplicado: Credenciales inyectadas para RedisInsight."
    fi

    show_success "Archivo $tool_name-stack.yml sanitizado correctamente"
}

# Funci√≥n para crear directorios de vol√∫menes
create_volume_directories() {
    local stack_file=$1
    local tool_name=$2
    show_message "Creando directorios para vol√∫menes de $tool_name..."
    local volume_paths=$(grep -oP "device: \K/[^\s]+" "$stack_file" | sort | uniq)

    for path in $volume_paths; do
        show_message "Creando directorio: $path"
        mkdir -p "$path"
    done
}

# Funci√≥n para inicializar la base de datos de Chatwoot
initialize_chatwoot_database() {
    local tool_name="chatwoot"
    show_message "Inicializando base de datos de Chatwoot..."
    
    # Esperar a que el contenedor 'redis_redis-server' est√© activo y accesible
    show_message "Esperando a que el contenedor de Redis est√© disponible (m√°x. 60s)..."
    for i in {1..12}; do
        if docker ps --filter "name=redis_redis-server" --format "{{.ID}}" | grep -q .; then
            show_success "Contenedor de Redis encontrado."
            break
        fi
        sleep 5
        if [ $i -eq 12 ]; then
            show_error "Contenedor 'redis_redis-server' no encontrado. La inicializaci√≥n de Chatwoot fallar√°."
            return 1
        fi
    done
    
    # Esperar un poco m√°s para que los servicios de Chatwoot inicien
    show_message "Esperando a que los servicios de Chatwoot Web est√©n disponibles (m√°x. 60s)..."
    for i in {1..12}; do
        local chatwoot_web_container=$(docker ps --filter "name=${tool_name}_web" --format "{{.ID}}")
        if [ ! -z "$chatwoot_web_container" ]; then
            show_success "Contenedor 'chatwoot_web' encontrado."
            break
        fi
        sleep 5
        if [ $i -eq 12 ]; then
            show_error "Contenedor 'chatwoot_web' no encontrado. No se puede inicializar la base de datos."
            return 1
        fi
    done

    show_message "Ejecutando setup inicial de Chatwoot..."
    # Ejecutar comandos de inicializaci√≥n dentro del contenedor de Chatwoot
    if docker exec $chatwoot_web_container rails db:chatwoot_prepare; then
        if docker exec $chatwoot_web_container rails assets:precompile; then
            show_success "Base de datos y assets de Chatwoot inicializados correctamente."
        else
            show_error "Fallo al precompilar assets de Chatwoot."
            return 1
        fi
    else
        show_error "Fallo al preparar base de datos de Chatwoot."
        return 1
    fi
}

# --- Flujo Principal ---
echo -e "\n${GREEN}=============================================${NC}"
echo -e "${GREEN}  ‚öôÔ∏è INSTALADOR MANUAL DE STACKS (SIN TOKEN)  ‚öôÔ∏è ${NC}"
echo -e "${GREEN}=============================================${NC}\n"

# 1. Configuraci√≥n de Variables
mkdir -p $DOCKER_DIR

read -p "Ingrese la contrase√±a com√∫n para todas las herramientas: " COMMON_PASSWORD
if [ -z "$COMMON_PASSWORD" ]; then show_error "La contrase√±a no puede estar vac√≠a"; exit 1; fi

read -p "Ingrese el dominio base (ejemplo: midominio.com): " BASE_DOMAIN
if [ -z "$BASE_DOMAIN" ]; then show_error "El dominio no puede estar vac√≠o"; exit 1; fi

DEFAULT_SECRET_KEY=$(tr -dc 'A-Za-z0-9' </dev/urandom | head -c 32)
read -p "Ingrese una clave secreta de 32 caracteres (Enter para usar generada): " SECRET_KEY
SECRET_KEY=${SECRET_KEY:-$DEFAULT_SECRET_KEY}

# Guardar variables globales
env_global_file="$DOCKER_DIR/.env.global"
cat > $env_global_file << EOL
COMMON_PASSWORD=$COMMON_PASSWORD
BASE_DOMAIN=$BASE_DOMAIN
SECRET_KEY=$SECRET_KEY
EOL

show_message "Credenciales guardadas en $env_global_file"

# 2. Despliegue de Herramientas
show_message "Iniciando la descarga y despliegue de las herramientas de Docker..."

for i in "${!SELECTED_TOOLS[@]}"; do
    tool_name="${SELECTED_TOOLS[$i]}"
    default_subdomain="${DEFAULT_SUBDOMAINS[$i]}"
    
    read -p "Ingrese el subdominio para $tool_name (predeterminado: $default_subdomain.$BASE_DOMAIN): " subdomain
    subdomain=${subdomain:-$default_subdomain}
    CUSTOM_SUBDOMAINS_MAP["$tool_name"]="$subdomain"
    
    local tool_dir="$DOCKER_DIR/$tool_name"
    mkdir -p "$tool_dir"
    echo "$subdomain" > "$tool_dir/.subdomain"

    local stack_file="$tool_dir/$tool_name-stack.yml"
    
    download_stack_file "$tool_name" "$stack_file" || continue
    sanitize_stack_file "$stack_file" "$tool_name" "$subdomain"
    create_volume_directories "$stack_file" "$tool_name"

    # Desplegar el stack
    if docker stack deploy -c "$stack_file" "$tool_name"; then
        show_success "Stack $tool_name desplegado correctamente."
    else
        show_error "Fallo al desplegar stack $tool_name. Revisar la salida de 'docker service ps $tool_name'."
        # Continuar con la instalaci√≥n, pero reportar el fallo
    fi

    # Espera para que las DB se estabilicen
    if [ "$tool_name" = "postgres" ] || [ "$tool_name" = "redis" ]; then
        show_message "Esperando a que $tool_name se estabilice (15 segundos)..."
        sleep 15
    fi

done

# 3. Post-despliegue (Inicializaci√≥n de Chatwoot)
if ! initialize_chatwoot_database; then
    show_error "La inicializaci√≥n de Chatwoot ha fallado. Puede que necesite ejecutar el comando manualmente m√°s tarde."
fi

# 4. Mensaje Final
show_success "üéâ ¬°INSTALACI√ìN COMPLETADA! (M√©todo Manual) üéâ"
echo ""
echo "Accede a tus servicios en los siguientes URLs:"

for tool_name in "${SELECTED_TOOLS[@]}"; do
    subdomain="${CUSTOM_SUBDOMAINS_MAP[$tool_name]}"
    echo "- ${tool_name^}: https://$subdomain.$BASE_DOMAIN"
done

echo ""
echo "Informaci√≥n de credenciales:"
echo "- Contrase√±a com√∫n: $COMMON_PASSWORD"
echo "- Clave secreta: $SECRET_KEY"

# Limpieza de archivos temporales (los YAMLs descargados)
for file in "${TEMP_FILES[@]}"; do
    rm -f "$file"
done
show_message "Archivos de stack temporales eliminados."

exit 0
