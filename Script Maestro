#!/usr/bin/env bash

# =================================================================================
# INSTALADOR AUTÓNOMO FINAL (v9.0.0 - SOLUCIÓN DEFINITIVA DE SHELL /bin/sh)
# Arregla el error "no such file or directory: /bin/bash" y todos los errores anteriores.
# =================================================================================

# ------------------------------
# 1. Configuración de Variables y Estilos
# ------------------------------
RED='\033[0;31m'
GREEN='\033[0;32m'
BLUE='\033[0;34m'
NC='\033[0m'

# TUS VARIABLES (Hardcodeadas)
DOCKER_DIR="/home/docker"
COMMON_PASSWORD="Adel14881599"        
SECRET_KEY="wKStf8R8fAt7W78olV8D8kU5rdiqr31O"
BASE_DOMAIN="queennovedad.shop"

# Definición de herramientas y subdominios (Orden: Base -> Servicios)
declare -a ALL_TOOLS=("traefik" "portainer" "redis" "postgres" "n8n" "evoapi" "chatwoot")
declare -gA SUBDOMAINS=(
    [traefik]="proxy" [portainer]="admin" [redis]="redis" [postgres]="postgres" 
    [n8n]="n8" [evoapi]="evoapi" [chatwoot]="chat"
)

# URLs de descarga de tus plantillas de GitHub
declare -gA STACK_URLS=(
    [traefik]="https://github.com/user-attachments/files/22956506/traefik-stack.yml"
    [portainer]="https://github.com/user-attachments/files/22956492/portainer-stack.yml"
    [redis]="https://github.com/user-attachments/files/22956503/redis-stack.yml"
    [postgres]="https://github.com/user-attachments/files/22956495/postgres-stack.yml"
    [n8n]="https://github.com/user-attachments/files/22956487/n8n-stack.yml"
    [evoapi]="https://github.com/user-attachments/files/22956481/evoapi-stack.yml"
    [chatwoot]="https://github.com/user-attachments/files/22956465/chatwoot-stack.yml"
)


# ------------------------------
# 2. Funciones Auxiliares
# ------------------------------
show_info() { echo -e "${BLUE}[INFO]${NC} $1"; }
show_success() { echo -e "${GREEN}[SUCCESS]${NC} $1"; }
show_error() { echo -e "${RED}[ERROR]${NC} $1"; exit 1; }
execute() { local cmd="$1"; show_info "-> Ejecutando: $cmd"; eval "$cmd"; local code=$?; if [ $code -ne 0 ]; then show_error "Comando falló con código $code: $cmd"; fi; }

# Función de instalación de dependencias y Docker
install_dependencies() {
    show_info "Verificando permisos (debe ser root/sudo)..."
    if [ "$EUID" -ne 0 ]; then
        show_error "Por favor, ejecuta este script como root o con sudo."
    fi

    show_info "Instalando dependencias (curl, docker, jq, docker-compose)..."
    execute "apt update"
    execute "apt install -y curl docker.io docker-compose jq"
    execute "systemctl start docker"
    execute "systemctl enable docker"
    show_success "Docker y dependencias instaladas."
    
    show_info "Inicializando Docker Swarm..."
    execute "docker swarm init --advertise-addr $(hostname -I | awk '{print $1}') || true"
    show_success "Docker Swarm inicializado."
    
    show_info "Creando redes overlay frontend y backend..."
    execute "docker network create --driver overlay --scope swarm frontend || true"
    execute "docker network create --driver overlay --scope swarm backend || true"
    show_success "Redes Docker Swarm creadas."
}

# ------------------------------
# 3. Función de Despliegue y Sustitución Segura
# ------------------------------
substitute_and_deploy_tool() {
    local tool_name="$1"
    local subdomain="${SUBDOMAINS[$tool_name]}"
    local stack_url="${STACK_URLS[$tool_name]}"
    local tool_dir="$DOCKER_DIR/$tool_name"
    local stack_file="$tool_dir/$tool_name-stack.yml"
    local deploy_file="$tool_dir/$tool_name-deploy.yml"

    # 1. Crear directorios base
    execute "mkdir -p \"$tool_dir\""
    
    # **FIX DE VOLUMEN:** Crear el directorio de almacenamiento persistente para Chatwoot.
    if [ "$tool_name" = "chatwoot" ]; then
        show_info "Creando directorio de almacenamiento persistente para Chatwoot..."
        execute "mkdir -p \"$tool_dir/chatwoot_storage\""
    fi

    # 2. Descargar plantilla
    show_info "Descargando plantilla para $tool_name desde GitHub..."
    if ! curl -fsSL "$stack_url" -o "$stack_file"; then
        show_error "No se pudo descargar la plantilla de $tool_name. Verifique la URL: $stack_url"
    fi

    # 3. Copiar para despliegue y Sustitución Segura
    execute "cp \"$stack_file\" \"$deploy_file\""
    
    show_info "Sustituyendo variables de entorno con sintaxis YAML segura..."
    
    # Sustituir Contraseña y Clave Secreta, FORZANDO COMILLAS DOBLES
    execute "sed -i 's#REPLACE_PASSWORD#\"$COMMON_PASSWORD\"#g' \"$deploy_file\""
    execute "sed -i 's#REPLACE_SECRET_KEY#\"$SECRET_KEY\"#g' \"$deploy_file\""

    # Sustituir Dominio y Subdominio
    execute "sed -i 's#REPLACE_SUBDOMAIN#$subdomain#g' \"$deploy_file\""
    execute "sed -i 's#REPLACE_DOMAIN#$BASE_DOMAIN#g' \"$deploy_file\""
    
    show_success "Variables de $tool_name sustituidas."

    # 4. Desplegar el stack
    show_info "Desplegando $tool_name en Docker Swarm..."
    execute "docker stack deploy -c \"$deploy_file\" \"$tool_name\""
    show_success "$tool_name instalado correctamente."

    # 5. Pausa para BBDD
    if [ "$tool_name" = "postgres" ] || [ "$tool_name" = "redis" ]; then
        show_info "Esperando 15 segundos para estabilización de la BBDD..."
        sleep 15
    fi
}

# ------------------------------
# 4. Función de Inicialización de Chatwoot (FIX FINAL SWARM /bin/sh)
# ------------------------------
initialize_chatwoot_db() {
    show_info "Iniciando proceso de inicialización de la base de datos de Chatwoot..."
    
    local service_name="chatwoot_rails" # Nombre completo del servicio en Swarm: [stackname]_[servicename]

    # **ESPERA CRÍTICA:** Espera para asegurar que el contenedor esté corriendo y la DB lista.
    show_info "Esperando 45 segundos para asegurar que el contenedor de Rails esté corriendo y PostgreSQL esté listo..."
    sleep 45

    # 1. Obtener el ID del contenedor del servicio 'chatwoot_rails'
    show_info "Buscando ID del contenedor en ejecución para el servicio $service_name..."
    local container_id
    # Filtramos por el nombre del servicio en Swarm
    container_id=$(docker ps -q --filter name=${service_name} --format "{{.ID}}" | head -n 1)

    if [ -z "$container_id" ]; then
        show_error "No se encontró ningún contenedor corriendo para el servicio $service_name. El despliegue de Chatwoot puede haber fallado."
    fi

    show_info "Contenedor ID encontrado: $container_id. Ejecutando comando de configuración de DB..."

    # **FIX V9.0.0:** Cambiar /bin/bash por /bin/sh para compatibilidad con la imagen Docker
    local db_setup_cmd="bundle exec rails db:chatwoot_setup"
    
    # Ejecutamos el comando dentro del contenedor usando /bin/sh
    if ! docker exec -e RAILS_ENV=production "$container_id" /bin/sh -c "$db_setup_cmd"; then
        show_error "La inicialización de la base de datos de Chatwoot falló usando docker exec."
    fi
    
    show_success "Inicialización de base de datos completada exitosamente."
}


# ------------------------------
# 5. Lógica Principal
# ------------------------------

install_dependencies

show_info "Iniciando despliegue de todos los servicios..."
for tool_name in "${ALL_TOOLS[@]}"; do
    substitute_and_deploy_tool "$tool_name"
    
    if [ "$tool_name" = "chatwoot" ]; then
        initialize_chatwoot_db
    fi
done

# ------------------------------
# 6. Resultados Finales
# ------------------------------

show_info "Guardando credenciales en $DOCKER_DIR/.env.global..."
echo "COMMON_PASSWORD=$COMMON_PASSWORD" > "$DOCKER_DIR/.env.global"
echo "BASE_DOMAIN=$BASE_DOMAIN" >> "$DOCKER_DIR/.env.global"
echo "SECRET_KEY=$SECRET_KEY" >> "$DOCKER_DIR/.env.global"

show_success "¡Instalación completada! 🎉"
echo ""
echo "Accede a tus servicios en los siguientes URLs:"
echo "- Traefik: https://${SUBDOMAINS[traefik]}.$BASE_DOMAIN"
echo "- Portainer: https://${SUBDOMAINS[portainer]}.$BASE_DOMAIN"
echo "- Redis: https://${SUBDOMAINS[redis]}.$BASE_DOMAIN"
echo "- Postgres: https://${SUBDOMAINS[postgres]}.$BASE_DOMAIN"
echo "- N8n: https://${SUBDOMAINS[n8n]}.$BASE_DOMAIN"
echo "- Evoapi: https://${SUBDOMAINS[evoapi]}.$BASE_DOMAIN"
echo "- Chatwoot: https://${SUBDOMAINS[chatwoot]}.$BASE_DOMAIN"
echo ""
echo "Información de credenciales:"
echo "- Contraseña común: $COMMON_PASSWORD"
echo "- Clave secreta: $SECRET_KEY"
echo ""
echo "Esta información se ha guardado en: $DOCKER_DIR/.env.global"
